======================
7-base_geometry.py
======================

Module defining the BaseGeometry class used as the second blueprint.

=====================
Test Cases:
=====================

>>> # Import the BaseGeometry class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> # Create an instance of BaseGeometry
>>> bg = BaseGeometry()

>>> # Test integer_validator with valid input
>>> bg.integer_validator("string", 7)
>>> bg.integer_validator("name", 12)
>>> bg.integer_validator("age", 0)

>>> # Test integer_validator with invalid input (ValueError and TypeError)
>>> bg.integer_validator("age", 0)  # Should raise ValueError: age must be greater than 0
>>> bg.integer_validator("name", "Edward")  # Should raise TypeError: name must be an integer
>>> bg.integer_validator("name", [1])  # Should raise TypeError: name must be an integer
>>> bg.integer_validator("name", {2,3})  # Should raise TypeError: name must be an integer
>>> bg.integer_validator("name", (7, ))  # Should raise TypeError: name must be an integer
>>> bg.integer_validator("name", None)  # Should raise TypeError: name must be an integer
>>> bg.integer_validator("num", "3")  # Should raise TypeError: num must be an integer
>>> bg.integer_validator("negative", -1)  # Should raise ValueError: negative must be greater than 0
>>> bg.integer_validator("float", 2.2)  # Should raise TypeError: float must be an integer
>>> bg.integer_validator("negative2", -1.2)  # Should raise TypeError: negative2 must be an integer
>>> bg.integer_validator("bool", True)  # Should raise TypeError: bool must be an integer

>>> # Test integer_validator with missing argument and area method
>>> bg.integer_validator("age")  # Should raise TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.area()  # Should raise Exception: area() is not implemented

